// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}



enum ProjectStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  ON_HOLD
}


enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}
model User {
  id            String       @default(cuid()) @id
  name          String?
  email         String?   @unique
  role          String?
  password      String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  expenses_made  Expense[]
  project       Project[]
  accounts      Account[]
  sessions      Session[]
  time_entry    TimeEntry[]
  recipient     Notification[]
  team_membership  TeamMembership[]
  @@map(name: "users")
}

model Project {
  id            String      @default(cuid()) @id
  project_name  String?
  budget        Int?
  status        ProjectStatus?  
  task          Task[]
  file          File[]
  project       Invoice[]
  team_membership  TeamMembership[]
  project_label     ProjectLabel[]
  expenses      Expense[]
  createdBy     User?     @relation(fields: [userId], references: [id])
  userId        String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

model Expense {
  id          String    @default(cuid()) @id
  amount      Float     // Amount spent
  description String?   // Description of the expense
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id])
  task          Task?         @relation(fields: [taskId], references: [id]) // Reference to Task model
  taskId        String?
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now()) @map(name: "created_at")
}

model Task {
  id          String     @default(cuid()) @id
  name        String
  description String?
  project     Project    @relation(fields: [projectId], references: [id])
  projectId   String
  file        File[]
  time        TimeEntry[]
  expenses      Expense[]
  priority    TaskPriority?
  createdAt   DateTime   @default(now()) @map(name: "created_at")
  updatedAt   DateTime   @updatedAt @map(name: "updated_at")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique@map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
}


model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model TimeEntry {
  id          String    @default(cuid()) @id
  task        Task      @relation(fields: [taskId], references: [id])
  taskId      String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  startTime   DateTime
  endTime     DateTime
  duration    Float     // Duration in hours
}

model TeamMembership {
  id          String    @default(cuid()) @id
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  role        String    
}

model File {
  id           String    @default(cuid()) @id
  filename     String
  path         String
  project      Project?  @relation(fields: [projectId], references: [id])
  projectId    String?
  task         Task?     @relation(fields: [taskId], references: [id])
  taskId       String?
  createdAt    DateTime  @default(now()) @map(name: "created_at")
}

model Notification {
  id           String    @default(cuid()) @id
  content      String
  type         String    // Notification type (e.g., "Task Assignment", "Deadline Reminder")
  recipient    User      @relation(fields: [recipientId], references: [id])
  recipientId  String
  createdAt    DateTime  @default(now()) @map(name: "created_at")
  read         Boolean   @default(false)
}

model Invoice {
  id            String      @default(cuid()) @id
  project       Project     @relation(fields: [projectId], references: [id])
  projectId     String
  amount        Float
  payment       Payment[]
  dueDate       DateTime
  status        String      // Invoice status (e.g., "Pending", "Paid")
  createdAt     DateTime    @default(now()) @map(name: "created_at")
}

model Payment {
  id            String      @default(cuid()) @id
  invoice       Invoice     @relation(fields: [invoiceId], references: [id])
  invoiceId     String
  amount        Float
  transactionId String
  createdAt     DateTime    @default(now()) @map(name: "created_at")
}

// model Comment {
//   id          String    @default(cuid()) @id
//   content     String
//   createdAt   DateTime  @default(now()) @map(name: "created_at")
//   updatedAt   DateTime? @map(name: "updated_at")
//   project     Project?  @relation(fields: [projectId], references: [id])
//   projectId   String?
//   task        Task?     @relation(fields: [taskId], references: [id])
//   taskId      String?
//   user        User?     @relation(fields: [userId], references: [id])
//   userId      String?
// }

model ProjectLabel {
  id          String    @default(cuid()) @id
  name        String
  color       String    // Optional: Define label colors for visual distinction
  projects    Project[] // Relation to projects
}

